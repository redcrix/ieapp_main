/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Optional } from '@angular/core';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { SmoothScroll } from '../smooth-scroll/smooth-scroll';
var NgScrollbarView = /** @class */ (function () {
    function NgScrollbarView(virtualScrollViewport, smoothScroll) {
        this.virtualScrollViewport = virtualScrollViewport;
        this.smoothScroll = smoothScroll;
        if (!virtualScrollViewport) {
            throw new Error('NgScrollBar: add [NgScrollbarView] directive on CdkVirtualScrollViewport component only');
        }
        if (!smoothScroll) {
            throw new Error('NgScrollBar: add [smoothScroll] directive is required with [NgScrollbarView]');
        }
    }
    NgScrollbarView.decorators = [
        { type: Directive, args: [{
                    selector: '[ngScrollbarView]'
                },] }
    ];
    /** @nocollapse */
    NgScrollbarView.ctorParameters = function () { return [
        { type: CdkVirtualScrollViewport, decorators: [{ type: Optional }] },
        { type: SmoothScroll, decorators: [{ type: Optional }] }
    ]; };
    return NgScrollbarView;
}());
export { NgScrollbarView };
if (false) {
    /** @type {?} */
    NgScrollbarView.prototype.virtualScrollViewport;
    /** @type {?} */
    NgScrollbarView.prototype.smoothScroll;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2Nyb2xsYmFyLXZpZXcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsic2Nyb2xsYmFyL25nLXNjcm9sbGJhci12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFFNUQ7SUFLRSx5QkFBK0IscUJBQStDLEVBQy9DLFlBQTBCO1FBRDFCLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBMEI7UUFDL0MsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDdkQsSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMseUZBQXlGLENBQUMsQ0FBQztTQUM1RztRQUNELElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyw4RUFBOEUsQ0FBQyxDQUFDO1NBQ2pHO0lBQ0gsQ0FBQzs7Z0JBYkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7aUJBQzlCOzs7O2dCQUxPLHdCQUF3Qix1QkFRakIsUUFBUTtnQkFQZixZQUFZLHVCQVFMLFFBQVE7O0lBUXZCLHNCQUFDO0NBQUEsQUFkRCxJQWNDO1NBWFksZUFBZTs7O0lBRWQsZ0RBQWtFOztJQUNsRSx1Q0FBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0Nka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Njcm9sbGluZyc7XHJcbmltcG9ydCB7U21vb3RoU2Nyb2xsfSBmcm9tICcuLi9zbW9vdGgtc2Nyb2xsL3Ntb290aC1zY3JvbGwnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbbmdTY3JvbGxiYXJWaWV3XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nU2Nyb2xsYmFyVmlldyB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHB1YmxpYyB2aXJ0dWFsU2Nyb2xsVmlld3BvcnQ6IENka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydCxcclxuICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBwdWJsaWMgc21vb3RoU2Nyb2xsOiBTbW9vdGhTY3JvbGwpIHtcclxuICAgIGlmICghdmlydHVhbFNjcm9sbFZpZXdwb3J0KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignTmdTY3JvbGxCYXI6IGFkZCBbTmdTY3JvbGxiYXJWaWV3XSBkaXJlY3RpdmUgb24gQ2RrVmlydHVhbFNjcm9sbFZpZXdwb3J0IGNvbXBvbmVudCBvbmx5Jyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXNtb290aFNjcm9sbCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05nU2Nyb2xsQmFyOiBhZGQgW3Ntb290aFNjcm9sbF0gZGlyZWN0aXZlIGlzIHJlcXVpcmVkIHdpdGggW05nU2Nyb2xsYmFyVmlld10nKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19