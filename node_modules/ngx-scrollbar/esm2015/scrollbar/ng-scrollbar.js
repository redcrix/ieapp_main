/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Inject, Input, ViewChild, ContentChild, ElementRef, ChangeDetectorRef, ChangeDetectionStrategy, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { CdkScrollable } from '@angular/cdk/scrolling';
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil, tap, throttleTime } from 'rxjs/operators';
import { SmoothScroll } from '../smooth-scroll/smooth-scroll';
import { NgScrollbarView } from './ng-scrollbar-view';
// Native scrollbar size is 17px on all browsers,
// This value will be used to push the native scrollbar out of the scroll view to hide them
// An extra 1px is added to hide them properly on Edge browser
/** @type {?} */
const NATIVE_SCROLLBAR_SIZE = '18px';
export class NgScrollbar {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} _breakpointObserver
     * @param {?} _platform
     */
    constructor(_changeDetectorRef, _breakpointObserver, _platform) {
        this._changeDetectorRef = _changeDetectorRef;
        this._breakpointObserver = _breakpointObserver;
        this._platform = _platform;
        /**
         * Horizontal custom scrollbar
         */
        this.trackX = false;
        /**
         * Vertical custom Scrollbar
         */
        this.trackY = true;
        /**
         * Scrollbar visibility
         */
        this.shown = 'native';
        /**
         * Auto update scrollbars on content changes (Mutation Observer)
         */
        this.autoUpdate = true;
        /**
         * The smooth scroll duration when a scrollbar is clicked
         */
        this.scrollToDuration = 300;
        /**
         * Disable custom scrollbars on specific breakpoints
         */
        this.disableOnBreakpoints = [
            Breakpoints.HandsetLandscape,
            Breakpoints.HandsetPortrait
        ];
        this._disabled = false;
        /**
         * Unsubscribe component observables on destroy
         */
        this._unsubscribe$ = new Subject();
        /**
         * Steam that emits when scrollbar thumbnail needs to update (for internal uses)
         */
        this._updateObserver = new Subject();
        this.updateObserver = this._updateObserver.asObservable();
    }
    /**
     * Disable custom scrollbars and switch back to native scrollbars
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} disable
     * @return {?}
     */
    set disabled(disable) {
        disable ? this.disable() : this.enable();
    }
    /**
     * Viewport Element
     * @return {?}
     */
    get view() {
        return this.customViewPort
            ? this.customViewPort.virtualScrollViewport.getElementRef().nativeElement
            : this.scrollViewport.getElementRef().nativeElement;
    }
    /**
     * @return {?}
     */
    get scrollable() {
        return this.customViewPort
            ? this.customViewPort.virtualScrollViewport
            : this.scrollViewport;
    }
    /**
     * @return {?}
     */
    get smoothScroll() {
        return this.customViewPort
            ? this.customViewPort.smoothScroll
            : this.viewSmoothScroll;
    }
    /**
     * @return {?}
     */
    get hideNativeScrollbars() {
        /** @type {?} */
        const size = this.disabled ? '100%' : `calc(100% + ${NATIVE_SCROLLBAR_SIZE})`;
        return {
            width: this.trackY ? size : '100%',
            height: this.trackX ? size : '100%'
        };
    }
    /**
     * @return {?}
     */
    showScrollbarY() {
        return this.shown === 'always' || this.view.scrollHeight > this.view.clientHeight;
    }
    /**
     * @return {?}
     */
    showScrollbarX() {
        return this.shown === 'always' || this.view.scrollWidth > this.view.clientWidth;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // Avoid 'expression has changed after it was checked' error when 'disableOnBreakpoints' is set to false
        Promise.resolve().then((/**
         * @return {?}
         */
        () => {
            if (!this.disabled) {
                if (this.disableOnBreakpoints) {
                    // Enable/Disable custom scrollbar on breakpoints (Used to disable scrollbars on mobile phones)
                    this._breakpointObserver.observe(this.disableOnBreakpoints).pipe(tap((/**
                     * @param {?} result
                     * @return {?}
                     */
                    (result) => result.matches ? this.disable() : this.enable())), takeUntil(this._unsubscribe$)).subscribe();
                }
                else {
                    this.enable();
                }
            }
            // Update state on content changes
            this.updateObserver.pipe(throttleTime(200), tap((/**
             * @return {?}
             */
            () => this._changeDetectorRef.markForCheck())), takeUntil(this._unsubscribe$)).subscribe();
            if (isPlatformBrowser(this._platform)) {
                // Update on window resize
                fromEvent(window, 'resize').pipe(throttleTime(200), tap((/**
                 * @return {?}
                 */
                () => this.update())), takeUntil(this._unsubscribe$)).subscribe();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._unsubscribe$.next();
        this._unsubscribe$.complete();
        if (this._observer) {
            this._observer.disconnect();
        }
    }
    /**
     * Update scrollbar thumbnail position
     * @return {?}
     */
    update() {
        if (!this.disabled) {
            this._updateObserver.next();
        }
    }
    /**
     * Enable custom scrollbar
     * @return {?}
     */
    enable() {
        if (this.view) {
            this._disabled = false;
            // Update view
            this._changeDetectorRef.markForCheck();
            if (!this.customViewPort && this.autoUpdate && isPlatformBrowser(this._platform)) {
                // Observe content changes
                this._observer = new MutationObserver((/**
                 * @return {?}
                 */
                () => this.update()));
                this._observer.observe(this.view, { subtree: true, childList: true, characterData: true });
            }
        }
    }
    /**
     * Disable custom scrollbar
     * @return {?}
     */
    disable() {
        this._disabled = true;
        if (this._observer) {
            this._observer.disconnect();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    scrollTo(options) {
        return this.smoothScroll.scrollTo(options);
    }
    /**
     * @param {?} selector
     * @param {?=} offset
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToElement(selector, offset = 0, duration, easeFunc) {
        return this.smoothScroll.scrollToElement(selector, offset, duration, easeFunc);
    }
    /**
     * @param {?} to
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollXTo(to, duration, easeFunc) {
        return this.smoothScroll.scrollXTo(to, duration, easeFunc);
    }
    /**
     * @param {?} to
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollYTo(to, duration, easeFunc) {
        return this.smoothScroll.scrollYTo(to, duration, easeFunc);
    }
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToTop(duration, easeFunc) {
        return this.smoothScroll.scrollToTop(duration, easeFunc);
    }
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToBottom(duration, easeFunc) {
        return this.smoothScroll.scrollToBottom(duration, easeFunc);
    }
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToRight(duration, easeFunc) {
        return this.smoothScroll.scrollToRight(duration, easeFunc);
    }
    /**
     * @param {?=} duration
     * @param {?=} easeFunc
     * @return {?}
     */
    scrollToLeft(duration, easeFunc) {
        return this.smoothScroll.scrollToLeft(duration, easeFunc);
    }
}
NgScrollbar.decorators = [
    { type: Component, args: [{
                selector: 'ng-scrollbar',
                template: "<div class=\"ng-scrollbar-layout ng-scrollbar-x-layout\"\r\n     [class.ng-scrollbar-invert]=\"invertX\">\r\n\r\n  <div class=\"ng-scrollbar-layout ng-scrollbar-y-layout\"\r\n       [class.ng-scrollbar-invert]=\"invertY\">\r\n\r\n    <div class=\"ng-scroll-view-container\">\r\n      <div #view\r\n           cdkScrollable\r\n           smoothScroll\r\n           class=\"ng-scroll-view {{viewClass}}\"\r\n           [ngStyle]=\"hideNativeScrollbars\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </div>\r\n\r\n    <ng-scrollbar-y #y\r\n                    *ngIf=\"!disabled && trackY\"\r\n                    [class.ng-scrollbar-visible]=\"showScrollbarY()\"\r\n                    [barClass]=\"barClass\"\r\n                    [thumbClass]=\"thumbClass\"\r\n                    [scrollToDuration]=\"scrollToDuration\">\r\n    </ng-scrollbar-y>\r\n  </div>\r\n\r\n  <ng-scrollbar-x #x\r\n                  *ngIf=\"!disabled && trackX\"\r\n                  [class.ng-scrollbar-visible]=\"showScrollbarX()\"\r\n                  [barClass]=\"barClass\"\r\n                  [thumbClass]=\"thumbClass\"\r\n                  [scrollToDuration]=\"scrollToDuration\">\r\n  </ng-scrollbar-x>\r\n\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[attr.customView]': '!!customViewPort',
                    '[attr.trackX]': 'trackX',
                    '[attr.trackY]': 'trackY',
                    '[attr.compact]': 'compact',
                    '[attr.autoHide]': 'shown === "hover"'
                },
                styles: [":host{display:block;overflow:hidden;--scrollbar-color:transparent;--scrollbar-container-color:transparent;--scrollbar-thumb-color:rgba(0, 0, 0, 0.2);--scrollbar-thumb-hover-color:rgba(0, 0, 0, 0.3);--scrollbar-border-radius:4px;--scrollbar-size:6px;--scrollbar-padding:8px;--scroll-view-margin:0;--scroll-view-color:transparent}:host[trackY=true]>.ng-scrollbar-layout>.ng-scrollbar-layout>.ng-scroll-view-container>.ng-scroll-view{overflow-y:scroll}:host[trackX=true]>.ng-scrollbar-layout>.ng-scrollbar-layout>.ng-scroll-view-container>.ng-scroll-view{overflow-x:scroll}:host>.ng-scrollbar-x-layout{flex-direction:column}:host>.ng-scrollbar-x-layout.ng-scrollbar-invert{flex-direction:column-reverse}:host>.ng-scrollbar-x-layout>.ng-scrollbar-y-layout{flex-direction:row}:host>.ng-scrollbar-x-layout>.ng-scrollbar-y-layout.ng-scrollbar-invert{flex-direction:row-reverse}:host[compact=true]>.ng-scrollbar-x-layout>ng-scrollbar-x{position:absolute;bottom:0}:host[compact=true]>.ng-scrollbar-x-layout.ng-scrollbar-invert>ng-scrollbar-x{top:0;bottom:unset}:host[compact=true]>.ng-scrollbar-x-layout>.ng-scrollbar-y-layout>ng-scrollbar-y{position:absolute;right:0;left:unset}:host[compact=true]>.ng-scrollbar-x-layout>.ng-scrollbar-y-layout.ng-scrollbar-invert>ng-scrollbar-y{right:unset;left:0}:host[autoHide=true]>.ng-scrollbar-layout>.ng-scrollbar-layout>ng-scrollbar-y,:host[autoHide=true]>.ng-scrollbar-layout>ng-scrollbar-x{opacity:0;transition:opacity 120ms ease-out}:host[autoHide=true]:active>.ng-scrollbar-layout>.ng-scrollbar-layout>ng-scrollbar-y,:host[autoHide=true]:active>.ng-scrollbar-layout>ng-scrollbar-x,:host[autoHide=true]:focus>.ng-scrollbar-layout>.ng-scrollbar-layout>ng-scrollbar-y,:host[autoHide=true]:focus>.ng-scrollbar-layout>ng-scrollbar-x,:host[autoHide=true]:hover>.ng-scrollbar-layout>.ng-scrollbar-layout>ng-scrollbar-y,:host[autoHide=true]:hover>.ng-scrollbar-layout>ng-scrollbar-x{opacity:1;transition:opacity 340ms ease-out}.ng-scroll-view,.ng-scrollbar-layout,:host{position:relative;height:100%;width:100%}.ng-scrollbar-layout{display:flex;min-height:0}.ng-scroll-view-container{flex:1;position:relative;overflow:hidden;margin:var(--scroll-view-margin)}.ng-scroll-view{box-sizing:content-box;-webkit-transform:translateZ(0);transform:translateZ(0);background:var(--scroll-view-color);-webkit-overflow-scrolling:touch}ng-scrollbar-x,ng-scrollbar-y{display:none;box-sizing:border-box;padding:var(--scrollbar-padding);background:var(--scrollbar-container-color)}ng-scrollbar-x.ng-scrollbar-visible,ng-scrollbar-y.ng-scrollbar-visible{display:block}ng-scrollbar-y{top:0;bottom:0}ng-scrollbar-x{left:0;right:0}::ng-deep ng-scrollbar-y .ng-scrollbar{width:var(--scrollbar-size)}::ng-deep ng-scrollbar-y .ng-scrollbar-thumb{width:100%}::ng-deep ng-scrollbar-x .ng-scrollbar{height:var(--scrollbar-size)}::ng-deep ng-scrollbar-x .ng-scrollbar-thumb{height:100%}::ng-deep .ng-scrollbar{height:100%;width:100%;z-index:1;border-radius:var(--scrollbar-border-radius);background-color:var(--scrollbar-color)}::ng-deep .ng-scrollbar-thumb{box-sizing:border-box;position:relative;width:0;height:0;border-radius:inherit;background-color:var(--scrollbar-thumb-color);-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);transition:height 150ms ease-out}::ng-deep .ng-scrollbar-thumb:active,::ng-deep .ng-scrollbar-thumb:hover{background-color:var(--scrollbar-thumb-hover-color)}::ng-deep cdk-virtual-scroll-viewport{height:100%}::ng-deep ng-scrollbar[customView=true] .ng-scroll-view{overflow:hidden!important}::ng-deep ng-scrollbar[trackY=true]>.ng-scrollbar-layout>.ng-scrollbar-layout>.ng-scroll-view-container>.ng-scroll-view,::ng-deep ng-scrollbar[trackY=true]>.ng-scrollbar-layout>.ng-scrollbar-layout>.ng-scroll-view-container>cdk-virtual-scroll-viewport{overflow-y:scroll}::ng-deep ng-scrollbar[trackX=true]>.ng-scrollbar-layout>.ng-scrollbar-layout>.ng-scroll-view-container>.ng-scroll-view,::ng-deep ng-scrollbar[trackX=true]>.ng-scrollbar-layout>.ng-scrollbar-layout>.ng-scroll-view-container>cdk-virtual-scroll-viewport{overflow-x:scroll}"]
            }] }
];
/** @nocollapse */
NgScrollbar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: BreakpointObserver },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
NgScrollbar.propDecorators = {
    trackX: [{ type: Input }],
    trackY: [{ type: Input }],
    shown: [{ type: Input }],
    autoUpdate: [{ type: Input }],
    viewClass: [{ type: Input }],
    barClass: [{ type: Input }],
    thumbClass: [{ type: Input }],
    scrollToDuration: [{ type: Input }],
    compact: [{ type: Input }],
    invertY: [{ type: Input }],
    invertX: [{ type: Input }],
    disableOnBreakpoints: [{ type: Input }],
    disabled: [{ type: Input, args: ['disabled',] }],
    verticalScrollbar: [{ type: ViewChild, args: ['y', { read: ElementRef },] }],
    horizontalScrollbar: [{ type: ViewChild, args: ['x', { read: ElementRef },] }],
    scrollViewport: [{ type: ViewChild, args: [CdkScrollable,] }],
    viewSmoothScroll: [{ type: ViewChild, args: [SmoothScroll,] }],
    customViewPort: [{ type: ContentChild, args: [NgScrollbarView,] }]
};
if (false) {
    /**
     * Horizontal custom scrollbar
     * @type {?}
     */
    NgScrollbar.prototype.trackX;
    /**
     * Vertical custom Scrollbar
     * @type {?}
     */
    NgScrollbar.prototype.trackY;
    /**
     * Scrollbar visibility
     * @type {?}
     */
    NgScrollbar.prototype.shown;
    /**
     * Auto update scrollbars on content changes (Mutation Observer)
     * @type {?}
     */
    NgScrollbar.prototype.autoUpdate;
    /**
     * Viewport class
     * @type {?}
     */
    NgScrollbar.prototype.viewClass;
    /**
     * Scrollbars class
     * @type {?}
     */
    NgScrollbar.prototype.barClass;
    /**
     * Scrollbars thumbnails class
     * @type {?}
     */
    NgScrollbar.prototype.thumbClass;
    /**
     * The smooth scroll duration when a scrollbar is clicked
     * @type {?}
     */
    NgScrollbar.prototype.scrollToDuration;
    /**
     * Compact mode
     * @type {?}
     */
    NgScrollbar.prototype.compact;
    /**
     * Invert vertical scrollbar position, if set the scrollbar will be on the right
     * @type {?}
     */
    NgScrollbar.prototype.invertY;
    /**
     * Invert horizontal scrollbar position, if set the scrollbar will go the top
     * @type {?}
     */
    NgScrollbar.prototype.invertX;
    /**
     * Disable custom scrollbars on specific breakpoints
     * @type {?}
     */
    NgScrollbar.prototype.disableOnBreakpoints;
    /**
     * @type {?}
     * @private
     */
    NgScrollbar.prototype._disabled;
    /**
     * Scrollbars ElementRef
     * @type {?}
     */
    NgScrollbar.prototype.verticalScrollbar;
    /** @type {?} */
    NgScrollbar.prototype.horizontalScrollbar;
    /**
     * Default viewport and smoothScroll references
     * @type {?}
     */
    NgScrollbar.prototype.scrollViewport;
    /** @type {?} */
    NgScrollbar.prototype.viewSmoothScroll;
    /**
     * Virtual viewport and smoothScroll references
     * @type {?}
     */
    NgScrollbar.prototype.customViewPort;
    /**
     * Unsubscribe component observables on destroy
     * @type {?}
     * @private
     */
    NgScrollbar.prototype._unsubscribe$;
    /**
     * Observe content changes
     * @type {?}
     * @private
     */
    NgScrollbar.prototype._observer;
    /**
     * Steam that emits when scrollbar thumbnail needs to update (for internal uses)
     * @type {?}
     * @private
     */
    NgScrollbar.prototype._updateObserver;
    /** @type {?} */
    NgScrollbar.prototype.updateObserver;
    /**
     * @type {?}
     * @private
     */
    NgScrollbar.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NgScrollbar.prototype._breakpointObserver;
    /**
     * @type {?}
     * @private
     */
    NgScrollbar.prototype._platform;
}
//# sourceMappingURL=data:application/json;base64,